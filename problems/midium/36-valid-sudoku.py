from typing import List


class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        tmp = [[] for _ in range(9)]

        for i in range(9):
            row = board[i]
            if not self.repetion(row):
                return False
            for j in range(9):
                tmp[j].append(row[j])
        for i in range(9):
            if not self.repetion(tmp[i]):
                return False
        for i in range(0, 9, 3):
            for j in range(0, 9, 3):
                tmp = []
                for m in range(i, i+3):
                    for n in range(j, j+3):
                        tmp.append(board[m][n])
                if not self.repetion(tmp):
                    return False
        return True

    def repetion(self, nums):
        memo = set()
        for i in nums:
            if i in memo and i != '.':
                return False
            memo.add(i)
        return True


if __name__ == '__main__':
    print(Solution().isValidSudoku([
  ["5","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]))
    print(Solution().isValidSudoku([
        ["8","3",".",".","7",".",".",".","."],
        ["6",".",".","1","9","5",".",".","."],
        [".","9","8",".",".",".",".","6","."],
        ["8",".",".",".","6",".",".",".","3"],
        ["4",".",".","8",".","3",".",".","1"],
        ["7",".",".",".","2",".",".",".","6"],
        [".","6",".",".",".",".","2","8","."],
        [".",".",".","4","1","9",".",".","5"],
        [".",".",".",".","8",".",".","7","9"]
]))
    print(Solution().isValidSudoku([
        [".",".",".",".","5",".",".","1","."],
        [".","4",".","3",".",".",".",".","."],
        [".",".",".",".",".","3",".",".","1"],
        ["8",".",".",".",".",".",".","2","."],
        [".",".","2",".","7",".",".",".","."],
        [".","1","5",".",".",".",".",".","."],
        [".",".",".",".",".","2",".",".","."],
        [".","2",".","9",".",".",".",".","."],
        [".",".","4",".",".",".",".",".","."]]))